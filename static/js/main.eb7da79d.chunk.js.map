{"version":3,"sources":["Workout.js","components/shared/TimeElapsed.js","components/shared/Timing.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Workout","workoutClick","bind","this","props","Fragment","className","index","default","active","onClick","title","Component","leftPad","width","n","length","Array","join","slice","TimeElapsed","seconds","timeElapsed","hour","Math","floor","toString","min","sec","msec","toFixed","substring","units","getUnits","id","data","React","Timing","rows","timings","map","row","TableRow","key","exerciseIndex","TableCell","component","scope","size","align","interval","time","Box","mt","TableContainer","Paper","Table","aria-label","TableHead","TableBody","Button","variant","color","startIcon","exportClick","href","download","Timer","intervalId","jsonString","handleWorkoutClick","e","setState","state","current","isRunning","pauseClick","resetClick","handleTiming","startTimer","dataStr","encodeURIComponent","JSON","stringify","updateTimer","isCurrentlyActive","delta","Date","now","startTime","setInterval","console","log","clearInterval","concat","Container","maxWidth","Grid","container","workouts","workout","mr","item","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb7da79d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nimport './styles/timer.css';\n\nclass Workout extends Component {\n\n  constructor() {\n    super();\n    this.workoutClick = this.workoutClick.bind(this);\n  }\n\n  workoutClick() {\n    this.props.workoutClick(this);\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <div \n          className={`slot color${this.props.index} \n                      ${this.props.default ? 'default': ''}\n                      ${this.props.active ? 'active': ''}`}\n          onClick={() => this.workoutClick()}>\n          {this.props.title}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Workout;","import React from \"react\";\n\nimport '../../styles/timer.css';\n\nconst leftPad = (width, n) => {\n  if ((n + '').length > width) {\n\t  return n;\n  }\n  const padding = new Array(width).join('0');\n  return (padding + n).slice(-width);\n};\n\nclass TimeElapsed extends React.Component {\n  getUnits() {\n    const seconds = this.props.timeElapsed / 1000;\n    return {\n      hour: Math.floor(seconds/60/60).toString(),\n      min: Math.floor(seconds / 60).toString(),\n      sec: Math.floor(seconds % 60).toString(),\n      msec: (seconds % 1).toFixed(3).substring(2)\n    };\n  }\n  render() {\n    const units = this.getUnits();\n    return (\n      <div id={this.props.id}>\n        <span className={`clock ${this.props.data}`}>{leftPad(2, units.hour)}:</span>\n        <span className={`clock ${this.props.data}`}>{leftPad(2, units.min)}:</span>\n        <span className={`clock ${this.props.data}`}>{leftPad(2, units.sec)}.</span>\n        <span className={`clock ${this.props.data}`}>{units.msec}</span>\n      </div>\n    );\n  }\n}\n\nexport default TimeElapsed;","import React from \"react\";\n\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nimport TimeElapsed from './TimeElapsed';\n\nclass Timing extends React.Component {\n  render() {\n\n    const rows = this.props.timings.map((row) =>\n      <TableRow key={row.exerciseIndex}>\n        <TableCell component=\"th\" scope=\"row\" size=\"small\">\n          {row.exerciseIndex}\n        </TableCell>\n        <TableCell align=\"right\">{row.title}</TableCell>\n        <TableCell align=\"right\">\n          <TimeElapsed timeElapsed={row.interval} data=\"clock-data\" />\n        </TableCell>\n        <TableCell align=\"right\">\n          <TimeElapsed timeElapsed={row.time} data=\"clock-data\" />\n        </TableCell>\n      </TableRow>\n    );\n\n    return (\n      <React.Fragment>\n        <div>\n          <Box mt={3}>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell size=\"small\">Exercise #</TableCell>\n                    <TableCell align=\"right\">Title</TableCell>\n                    <TableCell align=\"right\">Interval</TableCell>\n                    <TableCell align=\"right\">Total Time</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        </div>\n        {this.props.timings.length > 0 && \n          <Box mt={2}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<ArrowDownwardIcon />}\n              onClick={this.props.exportClick}\n              href={this.props.href}\n              download=\"data.json\"\n            >\n              Export\n            </Button>\n          </Box>\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Timing;","import React, {Component} from \"react\";\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport {workouts} from './config/config.json';\nimport Workout from './Workout';\nimport TimeElapsed from './components/shared/TimeElapsed';\nimport Timing from './components/shared/Timing';\n\n\nclass Timer extends Component {\n\n  intervalId = 0;\n  jsonString = 'data:text/json;charset=utf-8,';\n  constructor() {\n    super();\n    this.state = { timeElapsed: 0, isRunning: false, timings: [], current: '', href: this.jsonString };\n    this.handleWorkoutClick = this.handleWorkoutClick.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.exportClick = this.exportClick.bind(this);\n    this.isCurrentlyActive = this.isCurrentlyActive.bind(this);\n  }\n\n  updateTimer() {\n    const delta = Date.now() - this.startTime;\n    this.setState({timeElapsed: this.state.timeElapsed + delta, isRunning: true});\n    this.startTime = Date.now();\n  }\n\n  startTimer() {\n    if(!this.state.isRunning) {\n      this.startTime = Date.now();\n      this.intervalId = setInterval(this.updateTimer, 10);\n    }\n  }\n\n  isCurrentlyActive(e) {\n    console.log('ELE', e)\n  }\n\n  pauseClick() {\n    this.handleTiming();\n    clearInterval(this.intervalId);\n    this.setState({'current': '', isRunning: false});\n  }\n\n  resetClick() {\n    clearInterval(this.intervalId);\n        this.setState({'current': '', isRunning: false, timings: [], timeElapsed: 0, href: this.jsonString});\n  }\n\n  handleTiming() {\n    const {timings, timeElapsed, current}  = this.state;\n    let interval = timeElapsed;\n    let exerciseIndex = timings.length;\n    if(timings.length > 0) {\n      interval = timeElapsed - timings.slice(-1)[0].time\n    }\n    this.setState({timings: timings.concat({\n      time: timeElapsed, interval, \n      title: current,\n      exerciseIndex: exerciseIndex+1})});\n  }\n\n  handleWorkoutClick = (e) => {\n    this.setState({'current': e.props.title});\n    const {current, isRunning} = this.state;\n    \n    if(e.props.title === 'Pause') {\n      if(this.intervalId > 0) {\n        this.pauseClick();\n      }\n    } else if(e.props.title === 'Reset') {\n      if(this.intervalId > 0) {\n        this.resetClick();\n      }\n    } else if(current !== '' && e.props.title !== current && isRunning) {\n      this.handleTiming();\n    } else {\n      this.startTimer();\n    }\n  }\n\n  exportClick = () => {\n    let dataStr = this.jsonString + encodeURIComponent(JSON.stringify(this.state.timings));\n    this.setState({href: dataStr});\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <Box color=\"text.primary\">\n          <Container maxWidth=\"lg\">\n            <TimeElapsed id=\"timer\" timeElapsed={this.state.timeElapsed} />\n          </Container>\n          <Container maxWidth=\"lg\">\n            <Grid container>\n              \n              {workouts.map((workout, index) =>\n                <Box mr={2} key={index}>\n                  <Grid item>\n                    <Workout \n                      title={workout.title}\n                      workoutClick={this.handleWorkoutClick}\n                      color={workout.color}\n                      index=\"5\"\n                      active={this.state.current === workout.title} \n                    >  \n                    </Workout>\n                  </Grid>\n                </Box>\n              )}\n              <Box mr={2}>\n                <Grid item>\n                  <Workout \n                    title=\"Pause\" \n                    workoutClick={this.handleWorkoutClick}\n                    index=\"4\"\n                    default={true}\n                    active={false}\n                  >  \n                  </Workout>\n                </Grid>\n              </Box>\n              <Box mr={2}>\n                <Grid item>\n                  <Workout \n                    title=\"Reset\" \n                    workoutClick={this.handleWorkoutClick}\n                    index=\"4\"\n                    default={true}\n                    active={false} \n                  >  \n                  </Workout>\n                </Grid>\n              </Box>\n            </Grid>\n          </Container>\n          <Container maxWidth=\"lg\">\n            <Timing timings={this.state.timings} \n                    exportClick={this.exportClick}\n                    href={this.state.href} />\n          </Container>\n        </Box>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport './App.css';\n\n// import Chart from './Chart';\n// import Dashboard from './Dashboard';\nimport Timer from './Timer';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n      <div>\n        <ul>\n            <li>\n              <Link to=\"/gym\">Home</Link>\n            </li>\n            {/* <li>\n              <Link to=\"/chart\">Chart</Link>\n            </li> */}\n          </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/gym\">\n            <Timer />\n          </Route>\n          {/* <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route> */}\n          {/* <Route path=\"/chart\">\n            <Chart />\n          </Route> */}\n        </Switch>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}